/**
 * MIT License
 *
 * Copyright (c) [2021] [Rui Eduardo Soares]
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: "maven-publish"
apply plugin: "org.jetbrains.dokka"
apply plugin: "signing"
// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        group("documentation")
        getArchiveClassifier().set("javadoc")
        from "$project.buildDir/dokka/javadoc"
    }

    task sourcesJar(type: Jar) {
        group("documentation")
        getArchiveClassifier().set("sources")
        def androidMainSourceSets = android.sourceSets.main
        def kotlinSrcSet = androidMainSourceSets.java.srcDirs
        def resSrcSet = androidMainSourceSets.res.srcDirs
        def manifestSrcFile = androidMainSourceSets.manifest.srcFile
        from(kotlinSrcSet, resSrcSet, manifestSrcFile)
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    assembleRelease.dependsOn javadocJar, sourcesJar

    publishing {
        publications {
            release(MavenPublication) {
                //Component is release type aar file
                from components.release

                // add javadoc and sources jar to publication
                artifact javadocJar
                artifact sourcesJar

                //Coordinates
                groupId = "io.github.ruieduardosoares"
                artifactId = "android-mvi-kotlin"
                version = rootProject.ext.versionName

                //POM mandatory configurations to publish to https://central.sonatype.org
                pom {
                    name = "$groupId:$artifactId"
                    description = "Modern Android Mvi kotlin library"
                    url = "https://github.com/ruieduardosoares/mvi-kotlin"
                    licenses {
                        license {
                            name = "MIT License"
                            url = "http://www.opensource.org/licenses/mit-license.php"
                        }
                    }
                    developers {
                        developer {
                            name = "Rui Soares"
                            email = "rui_eduardo93@hotmail.com"
                            organization = "None"
                            organizationUrl = "https://github.com/ruieduardosoares"
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/ruieduardosoares/mvi-kotlin.git"
                        developerConnection = "scm:git:ssh://github.com:ruieduardosoares/mvi-kotlin.git"
                        url = "https://github.com/ruieduardosoares/mvi-kotlin/tree/main"
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
                credentials {
                    def properties = project.getProperties()
                    username = properties.get('ossrhUsername')
                    password = properties.get('ossrhPassword')
                }
            }
        }
    }
    signing {
        sign publishing.publications.release
    }
}
