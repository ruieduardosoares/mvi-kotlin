plugins {
    id "com.android.library"
    id "kotlin-android"
    id "kotlin-kapt"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        consumerProguardFiles "proguard-rules.pro"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: "true"
    }

    compileOptions {
        coreLibraryDesugaringEnabled rootProject.ext.coreLibraryDesugaringEnabled
        sourceCompatibility rootProject.ext.javaJvmTarget
        targetCompatibility rootProject.ext.javaJvmTarget
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.kotlinJvmTarget
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError !rootProject.ext.ignoreFailures
        // set to true to have all release builds run lint on issues with severity=fatal
        // and abort the build (controlled by abortOnError above) if fatal issues are found
        checkReleaseBuilds false
        // if true, only report errors
        ignoreWarnings false
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        //disable 'TypographyFractions','TypographyQuotes'
        // turn on the given issue id's
        //enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        //check 'NewApi', 'InlinedApi'
        // if true, don't include source code lines in the error output
        noLines true
        // if true, show all locations for an error, do not truncate lists, etc.
        showAll true
        // whether lint should include full issue explanations in the text error output
        explainIssues false
        // Fallback lint configuration (default severities, etc.)
        lintConfig file("$rootProject.rootDir/config/quality/lint/lint.xml")
        // if true, generate a text report of issues (false by default)
        textReport false
        // location to write the output; can be a file or 'stdout' or 'stderr'
        //textOutput 'stdout'
        //textOutput file("lint-results.txt")
        // if true, generate an XML report for use by for example Jenkins
        xmlReport rootProject.ext.reportXml
        // file to write report to (if not specified, defaults to lint-results.xml)
        //xmlOutput file("lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport rootProject.ext.reportHtml
        // optional path to report (default will be lint-results.html in the builddir)
        //htmlOutput file("lint-report.html")
        // Set the severity of the given issues to fatal (which means they will be
        // checked during release builds (even if the lint target is not included)
        //fatal 'NewApi', 'InlineApi'
        // Set the severity of the given issues to error
        //error 'Wakelock', 'TextViewEdits'
        // Set the severity of the given issues to warning
        //warning 'ResourceAsColor'
        // Set the severity of the given issues to ignore (same as disabling the check)
        //ignore 'TypographyQuotes'
        // Set the severity of the given issues to informational
        //informational 'StopShip'
        // Use (or create) a baseline file for issues that should not be reported
        //baseline file("lint-baseline.xml")
        // Normally most lint checks are not run on test sources (except the checks
        // dedicated to looking for mistakes in unit or instrumentation tests, unless
        // ignoreTestSources is true). You can turn on normal lint checking in all
        // sources with the following flag, false by default:
        //checkTestSources true
        // Like checkTestSources, but always skips analyzing tests -- meaning that it
        // also ignores checks that have explicitly asked to look at test sources, such
        // as the unused resource check.
        ignoreTestSources true
        // Normally lint will skip generated sources, but you can turn it on with this flag
        checkGeneratedSources false
        // Normally lint will analyze all dependencies along with each module; this ensures
        // that lint can correctly (for example) determine if a resource declared in a library
        // is unused; checking only the library in isolation would not be able to identify this
        // problem. However, this leads to quite a bit of extra computation; a library is
        // analyzed repeatedly, for each module that it is used in.
        checkDependencies true
    }

    testOptions {
        execution "ANDROIDX_TEST_ORCHESTRATOR"

        // Encapsulates options for local unit tests.
        unitTests {
            unitTests.all {
                useJUnitPlatform()
                // All the usual Gradle options.
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    showStandardStreams = true
                }
                ignoreFailures = true
            }

            // Include compiled resource into testing environment in case we use
            // Roboletric tests in case we interact with resources
            includeAndroidResources = true
        }
    }
}

dependencies {
    // Java 8+ Compatibility
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$rootProject.ext.desugarJdkLibsVersion"

    // Kotlin support
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.ext.kotlinVersion"

    // UI components
    implementation "androidx.core:core-ktx:$rootProject.ext.androidxCoreKtxVersion"
    implementation "androidx.activity:activity-ktx:$rootProject.ext.androidxActivityKtxVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.androidxAppCompatVersion"

    // RxJava
    implementation "io.reactivex.rxjava3:rxjava:$rootProject.ext.rxJavaVersion"
    implementation "io.reactivex.rxjava3:rxkotlin:$rootProject.ext.rxKotlinVersion"

    // Jvm Tests - Using Junit5
    testImplementation platform("org.junit:junit-bom:$rootProject.ext.junitBomVersion")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "com.google.truth:truth:$rootProject.ext.truthVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$rootProject.ext.mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$rootProject.ext.mockito2KotlinVersion"
    testImplementation "org.amshove.kluent:kluent-android:$rootProject.ext.kluentVersion"
}
